

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning tutorial
==========================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train your network using
transfer learning. You can read more about the transfer learning at `cs231n
notes <http://cs231n.github.io/transfer-learning/>`__

Quoting this notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios looks as follows:

-  **Finetuning the convnet**: Instead of random initializaion, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.




.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.autograd import Variable
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import copy
    import os







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.



.. code-block:: python


    # Data augmentation and normalization for training 
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomSizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Scale(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    dsets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x])
             for x in ['train', 'val']}
    dset_loaders = {x: torch.utils.data.DataLoader(dsets[x], batch_size=4,
                                                   shuffle=True, num_workers=4)
                    for x in ['train', 'val']}
    dset_sizes = {x: len(dsets[x]) for x in ['train', 'val']}
    dset_classes = dsets['train'].classes

    use_gpu = torch.cuda.is_available()








Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.



.. code-block:: python


    def imshow(inp):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        plt.imshow(inp)


    # Get a batch of training data
    inputs, classes = next(iter(dset_loaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out)
    plt.title([dset_classes[x] for x in classes])
    plt.show()





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :align: center




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving (deep copying) the best model

In the following, ``optim_scheduler`` is a function which returns an ``optim.SGD``
object when called as ``optim_scheduler(model, epoch)``. This is useful
when we want to change the learning rate or restrict the parameters we
want to optimize.




.. code-block:: python


    def train_model(model, criterion, optim_scheduler, num_epochs=25):
        since = time.time()

        best_model = model
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    optimizer = optim_scheduler(model, epoch)

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for data in dset_loaders[phase]:
                    # get the inputs
                    inputs, labels = data

                    # wrap them in Variable
                    if use_gpu:
                        inputs, labels = Variable(inputs.cuda()), \
                            Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.data[0]
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dset_sizes[phase]
                epoch_acc = running_corrects / dset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model = copy.deepcopy(model)

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))
        return best_model








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images




.. code-block:: python


    def visualize_model(model, num_images=5):
        for i, data in enumerate(dset_loaders['val']):
            inputs, labels = data
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)

        
            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)
        
            plt.figure()
            imshow(inputs.cpu().data[0])
            plt.title('pred: {}'.format(dset_classes[labels.data[0]]))
            plt.show()

            if i == num_images - 1:
                break








Finetuning the convnet
----------------------

First, let's create our learning rate scheduler. We will exponentially
decrease the learning rate once every few epochs.




.. code-block:: python


    def optim_scheduler_ft(model, epoch, init_lr=0.001, lr_decay_epoch=7):
        lr = init_lr * (0.1**(epoch // lr_decay_epoch))

        if epoch % lr_decay_epoch == 0:
            print('LR is set to {}'.format(lr))

        optimizer = optim.SGD(model.parameters(), lr=lr, momentum=0.9)
        return optimizer








Load a pretrained model and reset final fully connected layer.




.. code-block:: python


    model = models.resnet18(pretrained=True)
    num_ftrs = model.fc.in_features
    model.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model = model.cuda()

    criterion = nn.CrossEntropyLoss()








Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.




.. code-block:: python


    model = train_model(model, criterion, optim_scheduler_ft, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    LR is set to 0.001
    train Loss: 0.1675 Acc: 0.6352
    val Loss: 0.0871 Acc: 0.8170

    Epoch 1/24
    ----------
    train Loss: 0.1074 Acc: 0.8115
    val Loss: 0.1205 Acc: 0.8170

    Epoch 2/24
    ----------
    train Loss: 0.1018 Acc: 0.8320
    val Loss: 0.0615 Acc: 0.8954

    Epoch 3/24
    ----------
    train Loss: 0.0973 Acc: 0.8566
    val Loss: 0.1279 Acc: 0.8235

    Epoch 4/24
    ----------
    train Loss: 0.1030 Acc: 0.8238
    val Loss: 0.1493 Acc: 0.8039

    Epoch 5/24
    ----------
    train Loss: 0.1308 Acc: 0.8156
    val Loss: 0.0945 Acc: 0.8693

    Epoch 6/24
    ----------
    train Loss: 0.0940 Acc: 0.8238
    val Loss: 0.1366 Acc: 0.7908

    Epoch 7/24
    ----------
    LR is set to 0.0001
    train Loss: 0.0726 Acc: 0.8934
    val Loss: 0.1170 Acc: 0.7843

    Epoch 8/24
    ----------
    train Loss: 0.0921 Acc: 0.8197
    val Loss: 0.1103 Acc: 0.8301

    Epoch 9/24
    ----------
    train Loss: 0.0993 Acc: 0.8279
    val Loss: 0.1261 Acc: 0.7908

    Epoch 10/24
    ----------
    train Loss: 0.0750 Acc: 0.8648
    val Loss: 0.0886 Acc: 0.8431

    Epoch 11/24
    ----------
    train Loss: 0.0829 Acc: 0.8566
    val Loss: 0.1169 Acc: 0.8366

    Epoch 12/24
    ----------
    train Loss: 0.0790 Acc: 0.8811
    val Loss: 0.0931 Acc: 0.8366

    Epoch 13/24
    ----------
    train Loss: 0.0999 Acc: 0.8279
    val Loss: 0.0910 Acc: 0.8431

    Epoch 14/24
    ----------
    LR is set to 1.0000000000000003e-05
    train Loss: 0.0893 Acc: 0.8320
    val Loss: 0.1239 Acc: 0.8039

    Epoch 15/24
    ----------
    train Loss: 0.0925 Acc: 0.8320
    val Loss: 0.1025 Acc: 0.8431

    Epoch 16/24
    ----------
    train Loss: 0.0721 Acc: 0.8730
    val Loss: 0.1222 Acc: 0.7974

    Epoch 17/24
    ----------
    train Loss: 0.0662 Acc: 0.8934
    val Loss: 0.1022 Acc: 0.8170

    Epoch 18/24
    ----------
    train Loss: 0.0627 Acc: 0.8975
    val Loss: 0.0943 Acc: 0.8562

    Epoch 19/24
    ----------
    train Loss: 0.0970 Acc: 0.8279
    val Loss: 0.0846 Acc: 0.8758

    Epoch 20/24
    ----------
    train Loss: 0.0755 Acc: 0.8648
    val Loss: 0.1015 Acc: 0.8301

    Epoch 21/24
    ----------
    LR is set to 1.0000000000000002e-06
    train Loss: 0.0767 Acc: 0.8730
    val Loss: 0.1159 Acc: 0.8431

    Epoch 22/24
    ----------
    train Loss: 0.0657 Acc: 0.8852
    val Loss: 0.1017 Acc: 0.8431

    Epoch 23/24
    ----------
    train Loss: 0.0492 Acc: 0.9344
    val Loss: 0.1014 Acc: 0.8693

    Epoch 24/24
    ----------
    train Loss: 0.0594 Acc: 0.9139
    val Loss: 0.1058 Acc: 0.8301

    Training complete in 1m 8s
    Best val Acc: 0.895425



.. code-block:: python


    visualize_model(model)





.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_004.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_005.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_006.png
            :scale: 47




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model = torchvision.models.resnet18(pretrained=True)
    for param in model.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    model.fc = nn.Linear(512, 100)

    if use_gpu:
        model = model.cuda()

    criterion = nn.CrossEntropyLoss()






Let's write ``optim_scheduler``. We will use previous lr scheduler. Also
we need to optimize only the parameters of final FC layer.




.. code-block:: python


    def optim_scheduler_conv(model, epoch, init_lr=0.001, lr_decay_epoch=7):
        lr = init_lr * (0.1**(epoch // lr_decay_epoch))

        if epoch % lr_decay_epoch == 0:
            print('LR is set to {}'.format(lr))

        optimizer = optim.SGD(model.fc.parameters(), lr=lr, momentum=0.9)
        return optimizer








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model = train_model(model, criterion, optim_scheduler_conv)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    LR is set to 0.001
    train Loss: 0.2114 Acc: 0.6844
    val Loss: 0.0982 Acc: 0.8497

    Epoch 1/24
    ----------
    train Loss: 0.1445 Acc: 0.7008
    val Loss: 0.1045 Acc: 0.7778

    Epoch 2/24
    ----------
    train Loss: 0.1310 Acc: 0.7418
    val Loss: 0.1259 Acc: 0.8039

    Epoch 3/24
    ----------
    train Loss: 0.1051 Acc: 0.8115
    val Loss: 0.0994 Acc: 0.8431

    Epoch 4/24
    ----------
    train Loss: 0.1235 Acc: 0.7828
    val Loss: 0.1001 Acc: 0.8235

    Epoch 5/24
    ----------
    train Loss: 0.0951 Acc: 0.8525
    val Loss: 0.2119 Acc: 0.7320

    Epoch 6/24
    ----------
    train Loss: 0.1301 Acc: 0.7664
    val Loss: 0.1581 Acc: 0.7320

    Epoch 7/24
    ----------
    LR is set to 0.0001
    train Loss: 0.0989 Acc: 0.8320
    val Loss: 0.0890 Acc: 0.8758

    Epoch 8/24
    ----------
    train Loss: 0.0776 Acc: 0.8566
    val Loss: 0.0916 Acc: 0.8497

    Epoch 9/24
    ----------
    train Loss: 0.0982 Acc: 0.8238
    val Loss: 0.1023 Acc: 0.8431

    Epoch 10/24
    ----------
    train Loss: 0.0952 Acc: 0.8443
    val Loss: 0.1036 Acc: 0.8235

    Epoch 11/24
    ----------
    train Loss: 0.0965 Acc: 0.8361
    val Loss: 0.0997 Acc: 0.8497

    Epoch 12/24
    ----------
    train Loss: 0.0863 Acc: 0.8402
    val Loss: 0.1321 Acc: 0.8039

    Epoch 13/24
    ----------
    train Loss: 0.0912 Acc: 0.8443
    val Loss: 0.0974 Acc: 0.8627

    Epoch 14/24
    ----------
    LR is set to 1.0000000000000003e-05
    train Loss: 0.0921 Acc: 0.8402
    val Loss: 0.1009 Acc: 0.8235

    Epoch 15/24
    ----------
    train Loss: 0.0899 Acc: 0.8320
    val Loss: 0.1355 Acc: 0.7712

    Epoch 16/24
    ----------
    train Loss: 0.0850 Acc: 0.8361
    val Loss: 0.0955 Acc: 0.8497

    Epoch 17/24
    ----------
    train Loss: 0.0994 Acc: 0.8115
    val Loss: 0.1019 Acc: 0.8627

    Epoch 18/24
    ----------
    train Loss: 0.0893 Acc: 0.8484
    val Loss: 0.0827 Acc: 0.8627

    Epoch 19/24
    ----------
    train Loss: 0.0811 Acc: 0.8484
    val Loss: 0.1152 Acc: 0.8039

    Epoch 20/24
    ----------
    train Loss: 0.0780 Acc: 0.8484
    val Loss: 0.0846 Acc: 0.8693

    Epoch 21/24
    ----------
    LR is set to 1.0000000000000002e-06
    train Loss: 0.1199 Acc: 0.7910
    val Loss: 0.0970 Acc: 0.8562

    Epoch 22/24
    ----------
    train Loss: 0.0974 Acc: 0.8238
    val Loss: 0.1067 Acc: 0.8366

    Epoch 23/24
    ----------
    train Loss: 0.0919 Acc: 0.8402
    val Loss: 0.0961 Acc: 0.8693

    Epoch 24/24
    ----------
    train Loss: 0.0780 Acc: 0.8607
    val Loss: 0.1166 Acc: 0.8039

    Training complete in 0m 51s
    Best val Acc: 0.875817



.. code-block:: python


    visualize_model(model)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_007.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_008.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_009.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_010.png
            :scale: 47

    *

      .. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_011.png
            :scale: 47




**Total running time of the script:** ( 2 minutes  16.624 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
